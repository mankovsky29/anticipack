@page "/packing-activities"
@using Anticipack.Storage
@using Anticipack.Packing
@inject IPackingRepository PackingRepository
@inject NavigationManager Navigation

<div class="page-container">
    <header class="page-header">
        <h1 class="page-title">Packing Activities</h1>
        <button class="add-activity-btn" @onclick="AddNewActivity">
            <i class="fa fa-plus"></i> New Activity
        </button>
    </header>

    @if (_isLoading)
    {
        <div class="loading">
            <div class="loading-spinner"></div>
            <span>Loading activities...</span>
        </div>
    }
    else
    {
        @if (_activities.Any())
        {
            <div class="search-bar">
                <input type="text" class="search-input" placeholder="Search activities..." @bind="_searchTerm" @bind:event="oninput" />
                <select class="filter-dropdown" @bind="_selectedCategory">
                    <option value="">All Categories</option>
                    @foreach (var category in Enum.GetValues<PackingCategory>())
                    {
                        <option value="@category">@category</option>
                    }
                </select>
            </div>

            <div class="activities-grid">
                @foreach (var activity in FilteredActivities)
                {
                    <div class="activity-card">
                        <div class="activity-card-header">
                            <h3 class="activity-name">@activity.Name</h3>
                        </div>
                        <div class="activity-content">
                            <div class="activity-meta">
                                <i class="fa fa-calendar"></i> Last packed: @activity.LastPacked.ToString("MMM d, yyyy")
                            </div>
                            @if (activity.Category != default)
                            {
                                <div class="activity-category">
                                    @activity.Category
                                </div>
                            }
                            <div class="activity-stats">
                                <span>Packed @activity.RunCount time@(activity.RunCount != 1 ? "s" : "")</span>
                                <span>@(activity.Items?.Count ?? 0) items</span>
                            </div>
                        </div>
                        <div class="activity-footer">
                            <button class="card-btn" title="Copy" @onclick="() => CopyActivity(activity.Id)">
                                <i class="fa fa-copy"></i>
                            </button>
                            <button class="card-btn danger" title="Delete" @onclick="() => PromptDeleteActivity(activity)">
                                <i class="fa fa-trash"></i>
                            </button>
                            <button class="card-btn primary" title="Open" @onclick="() => OpenActivity(activity.Id)">
                                <i class="fa fa-arrow-right"></i>
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="no-activities">
                <div class="empty-icon">
                    <i class="fa fa-luggage-cart"></i>
                </div>
                <h3>No Packing Activities</h3>
                <p>Create your first packing activity to get started.</p>
                <button class="btn primary" @onclick="AddNewActivity">
                    <i class="fa fa-plus"></i> Create Packing Activity
                </button>
            </div>
        }
    }
</div>

@if (_showAddDialog)
{
    <div class="modal-overlay" @onclick="CancelAddActivity">
        <div class="modal-content" @onclick:stopPropagation>
            <h4 class="modal-header">New Packing Activity</h4>
            
            <div class="form-row">
                <label for="activity-name">Name</label>
                <input id="activity-name" @bind="_newActivityName" />
            </div>

            <div class="form-row">
                <label for="activity-category">Category</label>
                <select id="activity-category" @bind="_newActivityCategory">
                    @foreach (var category in Enum.GetValues<PackingCategory>())
                    {
                        <option value="@category">@category</option>
                    }
                </select>
            </div>

            <div class="form-actions">
                <button class="btn cancel" @onclick="CancelAddActivity">Cancel</button>
                <button class="btn primary" @onclick="ConfirmAddActivityAsync">Create</button>
            </div>
        </div>
    </div>
}

@if (_showDeleteConfirm)
{
    <div class="modal-overlay" @onclick="CancelDelete">
        <div class="modal-content" @onclick:stopPropagation>
            <h4 class="modal-header">Delete Activity?</h4>
            <p>Are you sure you want to delete "@_activityToDelete?.Name"?</p>
            <p>This action cannot be undone.</p>
            
            <div class="form-actions">
                <button class="btn cancel" @onclick="CancelDelete">Cancel</button>
                <button class="btn danger" @onclick="ConfirmDeleteActivityAsync">Delete</button>
            </div>
        </div>
    </div>
}

<div class="toast-container" aria-live="polite" aria-atomic="true">
    <div class="@($"toast {(_showToast ? "show" : "")}")">@_toastMessage</div>
</div>

@code {
    private List<Storage.PackingActivity> _activities = new();
    private bool _isLoading = true;
    private string _searchTerm = string.Empty;
    private string _selectedCategory = string.Empty;
    
    // Add dialog
    private bool _showAddDialog;
    private string _newActivityName = string.Empty;
    private PackingCategory _newActivityCategory = PackingCategory.Miscellaneous;
    
    // Delete confirmation
    private bool _showDeleteConfirm;
    private Storage.PackingActivity? _activityToDelete;
    
    // Toast
    private bool _showToast;
    private string _toastMessage = string.Empty;
    private System.Threading.CancellationTokenSource? _toastCts;

    protected override async Task OnInitializedAsync()
    {
        await LoadActivitiesAsync();
    }

    private async Task LoadActivitiesAsync()
    {
        _isLoading = true;
        StateHasChanged();

        try
        {
            _activities = await PackingRepository.GetAllAsync();
        }
        catch
        {
            ShowToast("Failed to load activities");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private IEnumerable<Storage.PackingActivity> FilteredActivities
    {
        get
        {
            var filtered = _activities.AsEnumerable();
            
            if (!string.IsNullOrWhiteSpace(_searchTerm))
            {
                filtered = filtered.Where(a => a.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase));
            }
            
            if (!string.IsNullOrWhiteSpace(_selectedCategory))
            {
                filtered = filtered.Where(a => a.Category.ToString().Equals(_selectedCategory, StringComparison.OrdinalIgnoreCase));
            }
            
            return filtered;
        }
    }

    private void AddNewActivity()
    {
        _newActivityName = "New Packing Activity";
        _newActivityCategory = PackingCategory.Miscellaneous;
        _showAddDialog = true;
    }

    private void CancelAddActivity()
    {
        _showAddDialog = false;
    }

    private async Task ConfirmAddActivityAsync()
    {
        if (string.IsNullOrWhiteSpace(_newActivityName))
            return;

        var newActivity = new Storage.PackingActivity
        {
            Name = _newActivityName,
            Category = _newActivityCategory,
            LastPacked = DateTime.Now
        };

        try
        {
            await PackingRepository.AddOrUpdateAsync(newActivity);
            ShowToast("Activity created successfully");
            await LoadActivitiesAsync();
        }
        catch
        {
            ShowToast("Failed to create activity");
        }
        finally
        {
            _showAddDialog = false;
        }
    }

    private void PromptDeleteActivity(Storage.PackingActivity activity)
    {
        _activityToDelete = activity;
        _showDeleteConfirm = true;
    }

    private void CancelDelete()
    {
        _activityToDelete = null;
        _showDeleteConfirm = false;
    }

    private async Task ConfirmDeleteActivityAsync()
    {
        if (_activityToDelete == null)
            return;

        try
        {
            await PackingRepository.DeleteAsync(_activityToDelete.Id);
            ShowToast("Activity deleted successfully");
            await LoadActivitiesAsync();
        }
        catch
        {
            ShowToast("Failed to delete activity");
        }
        finally
        {
            _activityToDelete = null;
            _showDeleteConfirm = false;
        }
    }

    private async Task CopyActivity(string id)
    {
        try
        {
            await PackingRepository.CopyPackingAsync(id);
            ShowToast("Activity copied successfully");
            await LoadActivitiesAsync();
        }
        catch
        {
            ShowToast("Failed to copy activity");
        }
    }

    private void OpenActivity(string id)
    {
        Navigation.NavigateTo($"/packing-activity?id={id}");
    }

    private void ShowToast(string message)
    {
        try
        {
            _toastCts?.Cancel();
            _toastCts?.Dispose();
        }
        catch { }

        _toastCts = new System.Threading.CancellationTokenSource();

        _toastMessage = message;
        _showToast = true;
        StateHasChanged();

        _ = HideToastAfterDelayAsync(_toastCts.Token);
    }

    private async Task HideToastAfterDelayAsync(System.Threading.CancellationToken token)
    {
        try
        {
            await Task.Delay(2000, token);
            _showToast = false;
            await InvokeAsync(StateHasChanged);
        }
        catch (System.Threading.Tasks.TaskCanceledException)
        {
        }
    }

    public void Dispose()
    {
        _toastCts?.Cancel();
        _toastCts?.Dispose();
    }
}
