@page "/packing-activities"
@using Anticipack.Packing
@using Anticipack.Storage
@using System.IO
@inject NavigationManager Navigation
@inject IPackingRepository PackingRepository

<div class="page-shell">
    <header class="top-header">
        <div class="header-left">
            <button class="filter-btn" aria-expanded="false" title="Filter">
                <span class="chev">▾</span>
                <span class="filter-label">Completed</span>
                <span class="filter-count">@Packings.Count</span>
            </button>
        </div>
    </header>

    <main class="content-area">
        <ul class="activities-list">
            @foreach (var p in Packings.OrderByDescending(x => x.LastPacked))
            {
                var pack = p;

                <li class="activity-card" title="@($"{pack.Name} — last packed {pack.LastPacked:g}")">
                    <div class="card-left" role="button" @onclick="@(() => OpenPacking(pack))" tabindex="0" @onclick:stopPropagation>
                        <span class="category-icon" aria-hidden="true">@GetCategoryIcon(pack.Category)</span>
                        <div class="card-body">
                            <div class="card-title">@pack.Name</div>
                            <div class="card-sub">Last packed: @pack.LastPacked.ToString("g")</div>
                        </div>
                    </div>

                    <div class="card-right" @onclick:stopPropagation>
                        <div class="menu-container">
                            <button class="menu-trigger" title="More" @onclick="@(() => ToggleMenu(pack.Id))" @onclick:stopPropagation>⋮</button>

                            @if (_openMenuId == pack.Id)
                            {
                                <div class="menu-popover" @onclick:stopPropagation>
                                    <button class="menu-item" @onclick="@(() => { CloseMenu(); PromptDelete(pack); })">Delete</button>
                                    <button class="menu-item" @onclick="@(() => { CloseMenu(); CopyPackingAsync(pack); })">Copy</button>
                                </div>
                            }
                        </div>
                    </div>
                </li>
            }
        </ul>
    </main>

    <footer class="bottom-input">
        <div class="hint-row">
            <span class="hint-circle" aria-hidden="true"></span>
            <input class="hint-input" placeholder="Try typing 'Pay utilities bill by Friday 6pm'" />
        </div>
    </footer>
</div>

<style>
:root{
    --bg-top:#6677c8;
    --bg-bottom:#7b8be0;
    --card-bg:#f6f8ff;
    --muted:rgba(0,0,0,0.45);
}

/* page layout */
.page-shell {
    min-height: 100vh;
    background: linear-gradient(180deg,var(--bg-top),var(--bg-bottom));
    padding: 18px;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
}

/* header */
.top-header {
    display:flex;
    align-items:center;
    margin-bottom: 12px;
}
.filter-btn {
    display:inline-flex;
    align-items:center;
    gap:8px;
    background:#eef2ff;
    color:#25336d;
    border:none;
    padding:8px 12px;
    border-radius:8px;
    box-shadow: 0 1px 0 rgba(11,18,32,0.03);
    font-weight:600;
    cursor:pointer;
}
.filter-btn .chev { font-size:12px; opacity:0.9; }

/* main list */
.content-area {
    flex:1 1 auto;
}

/* list reset */
.activities-list {
    list-style:none;
    padding:0;
    margin:0;
    max-width:760px;
}

/* card look */
.activity-card {
    display:flex;
    align-items:center;
    justify-content:space-between;
    background: var(--card-bg);
    border-radius:8px;
    padding:12px 14px;
    margin-bottom:10px;
    box-shadow: 0 1px 0 rgba(11,18,32,0.03);
    border:1px solid rgba(11,18,32,0.04);
}

/* left area clickable */
.card-left {
    display:flex;
    align-items:center;
    gap:12px;
    cursor:pointer;
    flex:1 1 auto;
    min-width:0;
}

/* category icon (replaced circles with icon/emoji) */
.category-icon {
    width:34px;
    height:34px;
    display:inline-flex;
    align-items:center;
    justify-content:center;
    font-size:18px;
    background: linear-gradient(180deg,#ffffff,#f0f4ff);
    border-radius:8px;
    box-shadow: inset 0 -1px 0 rgba(0,0,0,0.02);
    flex:0 0 34px;
}

/* body text */
.card-body { min-width:0; }
.card-title {
    font-size:15px;
    color:#0b1220;
    white-space:nowrap;
    overflow:hidden;
    text-overflow:ellipsis;
}
.card-sub {
    font-size:12px;
    color:var(--muted);
    margin-top:4px;
}

/* right actions */
.card-right {
    display:flex;
    align-items:center;
    gap:8px;
    margin-left:12px;
}

/* menu trigger */
.menu-container { position: relative; display:inline-block; }
.menu-trigger {
    width:36px;
    height:36px;
    border-radius:6px;
    border:none;
    background:transparent;
    font-size:18px;
    cursor:pointer;
    color:#4b5563;
    display:inline-flex;
    align-items:center;
    justify-content:center;
}
.menu-popover {
    position:absolute;
    right:0;
    top:44px;
    background:white;
    border-radius:6px;
    box-shadow:0 6px 20px rgba(2,6,23,0.12);
    overflow:hidden;
    min-width:120px;
    z-index:1000;
}
.menu-item {
    display:block;
    width:100%;
    text-align:left;
    padding:8px 12px;
    border:none;
    background:transparent;
    cursor:pointer;
    font-size:14px;
}
.menu-item:hover { background: #f3f5ff; }

/* delete button fallback (hidden) */
.delete-btn { display:none; }

/* bottom input */
.bottom-input {
    margin-top: 20px;
    display:flex;
    justify-content:flex-start;
}
.hint-row {
    background: #eef2ff;
    padding:10px 12px;
    border-radius:8px;
    max-width:760px;
    display:flex;
    align-items:center;
    gap:10px;
    box-shadow: 0 6px 20px rgba(2,6,23,0.06);
}
.hint-circle {
    width:20px;
    height:20px;
    border-radius:50%;
    border:2px solid rgba(11,18,32,0.2);
    background:transparent;
    flex:0 0 20px;
}
.hint-input {
    border: none;
    background: transparent;
    outline: none;
    color: #0b1220;
    font-size:14px;
    width:100%;
}
</style>

@code {
    private List<Storage.PackingActivity> Packings { get; set; } = new();

    private bool _showDeleteConfirm;
    private Storage.PackingActivity? _pendingDelete;

    private bool _showToast;
    private string _toastMessage = string.Empty;
    private CancellationTokenSource? _toastCts;

    private string? _openMenuId;

    protected override async Task OnInitializedAsync()
    {
        Packings = await PackingRepository.GetAllAsync();
        if (Packings.Count == 0)
        {
            // Add sample data if none loaded
            var samples = new List<Storage.PackingActivity>
            {
                new() { Id = Guid.NewGuid().ToString(), Name = "Weekend Trip", LastPacked = DateTime.Now.AddDays(-1), Category = PackingCategory.Clothing, RunCount = 7 },
                new() { Id = Guid.NewGuid().ToString(), Name = "Gym Bag", LastPacked = DateTime.Now.AddDays(-10), Category = PackingCategory.Accessories, RunCount = 3 },
                new() { Id = Guid.NewGuid().ToString(), Name = "Business Trip", LastPacked = DateTime.Now.AddDays(-30), Category = PackingCategory.Documents, RunCount = 12 },
                new() { Id = Guid.NewGuid().ToString(), Name = "Beach Day", LastPacked = DateTime.Now.AddDays(-60), Category = PackingCategory.Accessories, RunCount = 2 },
            };
            foreach (var s in samples)
                await PackingRepository.AddOrUpdateAsync(s);

            Packings = await PackingRepository.GetAllAsync();
        }
    }

    private void OpenPacking(Storage.PackingActivity p)
    {
        var url = $"/packing-activity?id={Uri.EscapeDataString(p.Id)}";
        Navigation.NavigateTo(url);
    }

    private void PromptDelete(Storage.PackingActivity p)
    {
        _pendingDelete = p;
        _showDeleteConfirm = true;
        CloseMenu();
    }

    private void CancelDelete()
    {
        _pendingDelete = null;
        _showDeleteConfirm = false;
    }

    private async Task ConfirmDeleteAsync()
    {
        if (_pendingDelete is null)
            return;

        var id = _pendingDelete.Id;
        var name = _pendingDelete.Name;
        await PackingRepository.DeleteAsync(id);
        Packings = await PackingRepository.GetAllAsync();
        _pendingDelete = null;
        _showDeleteConfirm = false;

        ShowToast($"Deleted \"{name}\"");
        StateHasChanged();
    }

    private void ShowToast(string message)
    {
        try
        {
            _toastCts?.Cancel();
            _toastCts?.Dispose();
        }
        catch { }

        _toastCts = new CancellationTokenSource();

        _toastMessage = message;
        _showToast = true;
        StateHasChanged();

        _ = HideToastAfterDelayAsync(_toastCts.Token);
    }

    private async Task HideToastAfterDelayAsync(CancellationToken token)
    {
        try
        {
            await Task.Delay(2000, token);
            _showToast = false;
            await InvokeAsync(StateHasChanged);
        }
        catch (OperationCanceledException)
        {
            // ignore
        }
    }

    private void ToggleMenu(string id)
    {
        if (_openMenuId == id) _openMenuId = null;
        else _openMenuId = id;
    }

    private void CloseMenu() => _openMenuId = null;

    private async Task CopyPackingAsync(Storage.PackingActivity p)
    {
        var copy = new Storage.PackingActivity
        {
            Id = Guid.NewGuid().ToString(),
            Name = p.Name + " (Copy)",
            LastPacked = DateTime.Now,
            Category = p.Category,
            RunCount = 0
        };

        await PackingRepository.AddOrUpdateAsync(copy);
        Packings = await PackingRepository.GetAllAsync();
        Navigation.NavigateTo($"/packing-activity?id={Uri.EscapeDataString(copy.Id)}");
    }

    private string GetCategoryIcon(PackingCategory cat)
    {
        return cat switch
        {
            PackingCategory.Clothing => "👕",
            PackingCategory.Shoes => "👟",
            PackingCategory.Toiletries => "🧴",
            PackingCategory.Electronics => "🔌",
            PackingCategory.Documents => "📄",
            PackingCategory.Health => "💊",
            PackingCategory.Accessories => "👜",
            PackingCategory.Outdoor => "🎒",
            PackingCategory.Food => "🍱",
            PackingCategory.Entertainment => "🎵",
            _ => "📦",
        };
    }
}
