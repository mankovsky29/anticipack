@page "/user-settings"
@inject IJSRuntime JSRuntime

<div class="settings-page">
    <div class="settings-header">
        <h2>User Settings</h2>
    </div>

    <div class="settings-content">
        <div class="setting-section">
            <h3><i class="fas fa-palette"></i> Appearance</h3>
            
            <div class="setting-item">
                <label>Theme</label>
                <div class="theme-selector">
                    <button class="theme-option @(CurrentTheme == "light" ? "active" : "")" 
                            @onclick='() => SetTheme("light")'>
                        <i class="fas fa-sun"></i>
                        <span>Light</span>
                    </button>
                    <button class="theme-option @(CurrentTheme == "dark" ? "active" : "")" 
                            @onclick='() => SetTheme("dark")'>
                        <i class="fas fa-moon"></i>
                        <span>Dark</span>
                    </button>
                    <button class="theme-option @(CurrentTheme == "auto" ? "active" : "")" 
                            @onclick='() => SetTheme("auto")'>
                        <i class="fas fa-magic"></i>
                        <span>Auto</span>
                    </button>
                </div>
                <p class="setting-description">
                    Choose your preferred theme. Auto will match your device's system theme.
                </p>
            </div>
        </div>
    </div>
</div>

@code {
    private string CurrentTheme { get; set; } = "light";

    protected override async Task OnInitializedAsync()
    {
        CurrentTheme = await JSRuntime.InvokeAsync<string>("themeManager.getTheme");
    }

    private async Task SetTheme(string theme)
    {
        CurrentTheme = theme;
        await JSRuntime.InvokeVoidAsync("themeManager.setTheme", theme);
    }
}